trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - src/*

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'EmployeeManagementACR'
  imageRepository: 'employee-management'
  containerRegistry: 'employeemanagementacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  kubernetesServiceConnection: 'EmployeeManagementAKS'
  
stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build projects'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/k8s'
        ArtifactName: 'k8s-manifests'
        publishLocation: 'Container'

- stage: Docker
  displayName: Build and Push Docker Image
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Docker
    displayName: Build and Push Docker Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Docker image
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Docker
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Kubernetes manifests'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'k8s-manifests'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: KubernetesManifest@0
            displayName: 'Deploy to Kubernetes cluster'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              manifests: |
                $(System.ArtifactsDirectory)/k8s-manifests/deployment.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/ingress.yaml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
