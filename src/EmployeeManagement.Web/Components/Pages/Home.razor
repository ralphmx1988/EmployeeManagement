@page "/"
@using EmployeeManagement.Application.Interfaces
@using EmployeeManagement.Application.DTOs
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<PageTitle>Employee Management Dashboard</PageTitle>

<div class="container-fluid fade-in">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4">Employee Management Dashboard</h1>
            <p class="lead">Welcome to your employee management system</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card dashboard-card text-white bg-primary">
                <div class="card-body text-center">
                    <h5 class="card-title">Total Employees</h5>
                    <h2 class="card-text">@totalEmployees</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card dashboard-card text-white bg-success">
                <div class="card-body text-center">
                    <h5 class="card-title">Active Employees</h5>
                    <h2 class="card-text">@activeEmployees</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card dashboard-card text-white bg-info">
                <div class="card-body text-center">
                    <h5 class="card-title">Departments</h5>
                    <h2 class="card-text">@totalDepartments</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card dashboard-card text-white bg-warning">
                <div class="card-body text-center">
                    <h5 class="card-title">Avg. Salary</h5>
                    <h2 class="card-text">@averageSalary.ToString("C")</h2>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Employees by Department</h5>
                </div>
                <div class="card-body">
                    @if (departmentData.Any())
                    {
                        <div class="list-group">
                            @foreach (var dept in departmentData)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    @dept.Department
                                    <span class="badge bg-primary rounded-pill">@dept.Count</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No department data available.</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Recent Hires</h5>
                </div>
                <div class="card-body">
                    @if (recentHires.Any())
                    {
                        <div class="list-group">
                            @foreach (var employee in recentHires)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@employee.FullName</h6>
                                        <small>@employee.HireDate.ToString("MMM dd, yyyy")</small>
                                    </div>
                                    <p class="mb-1">@employee.Position</p>
                                    <small>@employee.Department</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No recent hires found.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2 d-md-flex">
                        <DxButton Text="View All Employees" 
                                 RenderStyle="ButtonRenderStyle.Primary"
                                 IconCssClass="fas fa-users"
                                 NavigateUrl="/employees" />
                        <DxButton Text="Add New Employee" 
                                 RenderStyle="ButtonRenderStyle.Success"
                                 IconCssClass="fas fa-plus"
                                 NavigateUrl="/employees" />
                        <DxButton Text="Department Reports" 
                                 RenderStyle="ButtonRenderStyle.Info"
                                 IconCssClass="fas fa-chart-bar"
                                 NavigateUrl="/employees" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int totalEmployees = 0;
    private int activeEmployees = 0;
    private int totalDepartments = 0;
    private decimal averageSalary = 0;
    
    private List<DepartmentStatistic> departmentData = new();
    private List<EmployeeDto> recentHires = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        var employees = (await EmployeeService.GetAllEmployeesAsync()).ToList();
        var departments = await EmployeeService.GetDepartmentsAsync();

        totalEmployees = employees.Count;
        activeEmployees = employees.Count(e => e.IsActive);
        totalDepartments = departments.Count();
        averageSalary = employees.Any() ? employees.Average(e => e.Salary) : 0;

        // Department statistics for chart
        departmentData = employees
            .GroupBy(e => e.Department)
            .Select(g => new DepartmentStatistic
            {
                Department = g.Key,
                Count = g.Count()
            })
            .ToList();

        // Recent hires (last 30 days)
        var thirtyDaysAgo = DateTime.Today.AddDays(-30);
        recentHires = employees
            .Where(e => e.HireDate >= thirtyDaysAgo)
            .OrderByDescending(e => e.HireDate)
            .Take(5)
            .ToList();
    }

    public class DepartmentStatistic
    {
        public string Department { get; set; } = string.Empty;
        public int Count { get; set; }
    }
}
